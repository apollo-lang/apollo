twice: (f: (Int) -> Int, x: Int) -> Int = f(f(x))
f: (n: Int) -> Int = n * n
twice(f, 2)

map: (f: (Int) -> Int, a: [Int]) -> [Int] = case (!a) [] otherwise f(h@a) :: map(f, t@a)
square: (a: Int) -> Int = a * a
map(square, [1,2,3,4,5])
